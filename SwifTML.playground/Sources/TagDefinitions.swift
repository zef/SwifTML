// This file is auto-generated by GenerateTags.swift, editing by hand is not recommended

extension SwifTML {

    public func Html(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("html", attributes: attributes, content)
    }
    public func Html(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("html", attributes: attributes, [content])
    }
    public static func Html(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("html", attributes: attributes, content)
    }
    public static func Html(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("html", attributes: attributes, [content])
    }


    public func Head(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("head", attributes: attributes, content)
    }
    public func Head(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("head", attributes: attributes, [content])
    }
    public static func Head(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("head", attributes: attributes, content)
    }
    public static func Head(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("head", attributes: attributes, [content])
    }


    public func Body(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("body", attributes: attributes, content)
    }
    public func Body(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("body", attributes: attributes, [content])
    }
    public static func Body(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("body", attributes: attributes, content)
    }
    public static func Body(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("body", attributes: attributes, [content])
    }


    public func Title(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("title", attributes: attributes, content)
    }
    public func Title(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("title", attributes: attributes, [content])
    }
    public static func Title(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("title", attributes: attributes, content)
    }
    public static func Title(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("title", attributes: attributes, [content])
    }


    public func Div(_ attribute: Attribute, _ content: [HTMLElement]) -> Tag {
        return Tag("div", attributes: [attribute], content)
    }
    public func Div(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("div", attributes: attributes, content)
    }
    public func Div(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("div", attributes: attributes, [content])
    }
    public static func Div(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("div", attributes: attributes, content)
    }
    public static func Div(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("div", attributes: attributes, [content])
    }


    public func Span(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("span", attributes: attributes, content)
    }
    public func Span(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("span", attributes: attributes, [content])
    }
    public static func Span(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("span", attributes: attributes, content)
    }
    public static func Span(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("span", attributes: attributes, [content])
    }


    public func Article(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("article", attributes: attributes, content)
    }
    public func Article(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("article", attributes: attributes, [content])
    }
    public static func Article(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("article", attributes: attributes, content)
    }
    public static func Article(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("article", attributes: attributes, [content])
    }


    public func Aside(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("aside", attributes: attributes, content)
    }
    public func Aside(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("aside", attributes: attributes, [content])
    }
    public static func Aside(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("aside", attributes: attributes, content)
    }
    public static func Aside(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("aside", attributes: attributes, [content])
    }


    public func Header(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("header", attributes: attributes, content)
    }
    public func Header(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("header", attributes: attributes, [content])
    }
    public static func Header(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("header", attributes: attributes, content)
    }
    public static func Header(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("header", attributes: attributes, [content])
    }


    public func Footer(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("footer", attributes: attributes, content)
    }
    public func Footer(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("footer", attributes: attributes, [content])
    }
    public static func Footer(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("footer", attributes: attributes, content)
    }
    public static func Footer(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("footer", attributes: attributes, [content])
    }


    public func Nav(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("nav", attributes: attributes, content)
    }
    public func Nav(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("nav", attributes: attributes, [content])
    }
    public static func Nav(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("nav", attributes: attributes, content)
    }
    public static func Nav(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("nav", attributes: attributes, [content])
    }


    public func Main(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("main", attributes: attributes, content)
    }
    public func Main(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("main", attributes: attributes, [content])
    }
    public static func Main(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("main", attributes: attributes, content)
    }
    public static func Main(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("main", attributes: attributes, [content])
    }


    public func Section(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("section", attributes: attributes, content)
    }
    public func Section(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("section", attributes: attributes, [content])
    }
    public static func Section(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("section", attributes: attributes, content)
    }
    public static func Section(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("section", attributes: attributes, [content])
    }


    public func H1(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h1", attributes: attributes, content)
    }
    public func H1(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h1", attributes: attributes, [content])
    }
    public static func H1(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h1", attributes: attributes, content)
    }
    public static func H1(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h1", attributes: attributes, [content])
    }


    public func H2(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h2", attributes: attributes, content)
    }
    public func H2(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h2", attributes: attributes, [content])
    }
    public static func H2(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h2", attributes: attributes, content)
    }
    public static func H2(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h2", attributes: attributes, [content])
    }


    public func H3(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h3", attributes: attributes, content)
    }
    public func H3(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h3", attributes: attributes, [content])
    }
    public static func H3(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h3", attributes: attributes, content)
    }
    public static func H3(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h3", attributes: attributes, [content])
    }


    public func H4(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h4", attributes: attributes, content)
    }
    public func H4(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h4", attributes: attributes, [content])
    }
    public static func H4(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h4", attributes: attributes, content)
    }
    public static func H4(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h4", attributes: attributes, [content])
    }


    public func H5(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h5", attributes: attributes, content)
    }
    public func H5(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h5", attributes: attributes, [content])
    }
    public static func H5(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h5", attributes: attributes, content)
    }
    public static func H5(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h5", attributes: attributes, [content])
    }


    public func H6(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h6", attributes: attributes, content)
    }
    public func H6(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h6", attributes: attributes, [content])
    }
    public static func H6(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("h6", attributes: attributes, content)
    }
    public static func H6(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("h6", attributes: attributes, [content])
    }


    public func P(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("p", attributes: attributes, content)
    }
    public func P(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("p", attributes: attributes, [content])
    }
    public static func P(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("p", attributes: attributes, content)
    }
    public static func P(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("p", attributes: attributes, [content])
    }


    public func Strong(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("strong", attributes: attributes, content)
    }
    public func Strong(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("strong", attributes: attributes, [content])
    }
    public static func Strong(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("strong", attributes: attributes, content)
    }
    public static func Strong(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("strong", attributes: attributes, [content])
    }


    public func Em(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("em", attributes: attributes, content)
    }
    public func Em(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("em", attributes: attributes, [content])
    }
    public static func Em(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("em", attributes: attributes, content)
    }
    public static func Em(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("em", attributes: attributes, [content])
    }


    public func I(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("i", attributes: attributes, content)
    }
    public func I(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("i", attributes: attributes, [content])
    }
    public static func I(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("i", attributes: attributes, content)
    }
    public static func I(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("i", attributes: attributes, [content])
    }


    public func Ul(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("ul", attributes: attributes, content)
    }
    public func Ul(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("ul", attributes: attributes, [content])
    }
    public static func Ul(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("ul", attributes: attributes, content)
    }
    public static func Ul(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("ul", attributes: attributes, [content])
    }


    public func Ol(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("ol", attributes: attributes, content)
    }
    public func Ol(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("ol", attributes: attributes, [content])
    }
    public static func Ol(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("ol", attributes: attributes, content)
    }
    public static func Ol(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("ol", attributes: attributes, [content])
    }


    public func Li(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("li", attributes: attributes, content)
    }
    public func Li(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("li", attributes: attributes, [content])
    }
    public static func Li(attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        return Tag("li", attributes: attributes, content)
    }
    public static func Li(_ content: HTMLElement, attributes: [Attribute] = []) -> Tag {
        return Tag("li", attributes: attributes, [content])
    }


    public func Br(attributes: [Attribute] = []) -> Tag {
        return Tag("br", "", attributes: attributes)
    }
    public static func Br(attributes: [Attribute] = []) -> Tag {
        return Tag("br", "", attributes: attributes)
    }


    public func Hr(attributes: [Attribute] = []) -> Tag {
        return Tag("hr", "", attributes: attributes)
    }
    public static func Hr(attributes: [Attribute] = []) -> Tag {
        return Tag("hr", "", attributes: attributes)
    }


    public func Meta(_ attribute: Attribute) -> Tag {
        return Tag("meta", "", attributes: [attribute])
    }
    public static func Meta(_ attribute: Attribute) -> Tag {
        return Tag("meta", "", attributes: [attribute])
    }
    public func Meta(_ attributes: [Attribute] = []) -> Tag {
        return Tag("meta", "", attributes: attributes)
    }
    public static func Meta(_ attributes: [Attribute] = []) -> Tag {
        return Tag("meta", "", attributes: attributes)
    }


    public func Link(to: String, target: String? = nil, attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        var attributes = attributes
        attributes.append(.attribute("href", to))
        if let target = target { attributes.append(.attribute("target", target)) }
        return Tag("a", attributes: attributes, content)
    }
    public func Link(_ content: HTMLElement, to: String, target: String? = nil, attributes: [Attribute] = []) -> Tag {
        var attributes = attributes
        attributes.append(.attribute("href", to))
        if let target = target { attributes.append(.attribute("target", target)) }
        return Tag("a", attributes: attributes, [content])
    }
    public static func Link(to: String, target: String? = nil, attributes: [Attribute] = [], _ content: [HTMLElement]) -> Tag {
        var attributes = attributes
        attributes.append(.attribute("href", to))
        if let target = target { attributes.append(.attribute("target", target)) }
        return Tag("a", attributes: attributes, content)
    }
    public static func Link(_ content: HTMLElement, to: String, target: String? = nil, attributes: [Attribute] = []) -> Tag {
        var attributes = attributes
        attributes.append(.attribute("href", to))
        if let target = target { attributes.append(.attribute("target", target)) }
        return Tag("a", attributes: attributes, [content])
    }


    public func Img(src: String, alt: String = "", attributes: [Attribute] = []) -> Tag {
        var attributes = attributes
        attributes.append(.attribute("src", src))
        attributes.append(.attribute("alt", alt))
        return Tag("img", "", attributes: attributes)
    }
    public static func Img(src: String, alt: String = "", attributes: [Attribute] = []) -> Tag {
        var attributes = attributes
        attributes.append(.attribute("src", src))
        attributes.append(.attribute("alt", alt))
        return Tag("img", "", attributes: attributes)
    }


    public func Stylesheet(at: String = "", rel: String = "stylesheet", attributes: [Attribute] = []) -> Tag {
        var attributes = attributes
        attributes.append(.attribute("href", at))
        attributes.append(.attribute("rel", rel))
        return Tag("link", "", attributes: attributes)
    }
    public static func Stylesheet(at: String = "", rel: String = "stylesheet", attributes: [Attribute] = []) -> Tag {
        var attributes = attributes
        attributes.append(.attribute("href", at))
        attributes.append(.attribute("rel", rel))
        return Tag("link", "", attributes: attributes)
    }

}
